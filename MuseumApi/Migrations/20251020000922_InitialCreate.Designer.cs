// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuseumApi.Data;

#nullable disable

namespace MuseumApi.Migrations
{
    [DbContext(typeof(MuseumContext))]
    [Migration("20251020000922_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("MuseumApi.Models.MuseumDailyHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeClosed")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeOpen")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("MuseumDailyHours");
                });

            modelBuilder.Entity("MuseumApi.Models.SpecialEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.ToTable("SpecialEvents");
                });

            modelBuilder.Entity("MuseumApi.Models.SpecialEventDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "Date")
                        .IsUnique();

                    b.ToTable("SpecialEventDates");
                });

            modelBuilder.Entity("MuseumApi.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TicketDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MuseumApi.Models.SpecialEventDate", b =>
                {
                    b.HasOne("MuseumApi.Models.SpecialEvent", "Event")
                        .WithMany("EventDates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MuseumApi.Models.Ticket", b =>
                {
                    b.HasOne("MuseumApi.Models.SpecialEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MuseumApi.Models.SpecialEvent", b =>
                {
                    b.Navigation("EventDates");
                });
#pragma warning restore 612, 618
        }
    }
}
